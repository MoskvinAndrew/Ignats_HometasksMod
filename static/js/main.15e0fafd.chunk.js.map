{"version":3,"sources":["common/button/B.module.css","common/Navigation/N.module.css","common/3Hometask/ThirdHometask.module.css","common/input/inputNew.module.css","common/checkBox/C.module.css","common/EditableSpan/ES.module.css","common/JuniorsFolder/Junior.module.css","common/input/inputNew.tsx","common/button/Button.tsx","common/3Hometask/Third-Hometask.tsx","common/checkBox/CheckBox.tsx","common/JuniorsFolder/PreJunior.tsx","common/EditableSpan/EditableSpan.tsx","common/JuniorsFolder/Junior.tsx","common/JuniorsFolder/Junior+.tsx","common/Navigation/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","InputNew","props","className","error","s","inputNya","errorStyle","value","nNew","onKeyPress","e","charCode","onKeyPressHandler","onEnter","onChange","onChangeHandler","onBlur","offEditMode","autoFocus","ButtonNew","typeofButton","B","box1","box11","btn","btnone","onClick","NewElemInNewArr","setnNew","name","ThirdHometask","TH","inputContainer","Button","counter","span","newArr","length","CheckBoxNew","C","chekboxtwo","checkbox","type","checked","checkbox__icon","PreJunior","CheckBox","EditableSpan","useState","editMode","setEditMode","title","settitle","currentTarget","ES","editableSpan","onDoubleClick","Junior","key","state","stateAsString","JSON","stringify","localStorage","setItem","saveState","x","y","defaultState","getItem","parse","restoreState","J","buttonsBlock","JuniorPlus","Navigation","N","dropdown","dropbtn","dropdown_content","accordion","to","App","setErr","setnewArr","newElement","id","v1","alert","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.15e0fafd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box1\":\"B_box1__2MNwT\",\"box11\":\"B_box11__WFYei\",\"btn\":\"B_btn__2SJSa\",\"btnone\":\"B_btnone__1Qoon\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropbtn\":\"N_dropbtn__1hqvr\",\"dropdown\":\"N_dropdown__2zCRT\",\"dropdown_content\":\"N_dropdown_content__3okKJ\",\"accordion\":\"N_accordion__3zhSK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"ThirdHometask_inputContainer__3LUfn\",\"Wrapp\":\"ThirdHometask_Wrapp__3vzIF\",\"message\":\"ThirdHometask_message__14_iI\",\"input\":\"ThirdHometask_input__2nIC_\",\"addButton\":\"ThirdHometask_addButton__OqySA\",\"span\":\"ThirdHometask_span__3CZPz\",\"counter\":\"ThirdHometask_counter__20cjX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputNya\":\"inputNew_inputNya__mo3NI\",\"span\":\"inputNew_span__2EjjU\",\"errorStyle\":\"inputNew_errorStyle__3Wrwr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chekboxtwo\":\"C_chekboxtwo__2cilK\",\"checkbox\":\"C_checkbox__uEHi8\",\"checkbox__icon\":\"C_checkbox__icon__3QT33\",\"icon--check\":\"C_icon--check__JFGAE\",\"icon--check-empty\":\"C_icon--check-empty__1xhzU\",\"chekbox-two\":\"C_chekbox-two__3b0ks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editableSpan\":\"ES_editableSpan__lcw_6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsBlock\":\"Junior_buttonsBlock___3oYH\"};","import React, {\r\n    ButtonHTMLAttributes,\r\n    ChangeEvent,\r\n    DetailedHTMLProps,\r\n    InputHTMLAttributes,\r\n    KeyboardEvent,\r\n    useState\r\n} from 'react';\r\nimport s from './inputNew.module.css';\r\nimport {AppTypes} from \"../../App\";\r\n\r\n\r\nexport type InputNyaTypes = {\r\n\r\n    nNew?: string,\r\n    newArr?: Array<AppTypes>,\r\n    onChangeHandler?: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    onKeyPressHandler?: (e: KeyboardEvent<HTMLInputElement>) => void,\r\n    setnNew?: (value: string) => void,\r\n    onEnter?: () => void,\r\n    error?: string | null,\r\n    autoFocus:boolean,\r\n    onBlur?:()=>void,\r\n    offEditMode?:()=>void,\r\n};\r\n\r\n\r\nfunction InputNew(props: InputNyaTypes) {\r\n\r\n    let onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            props.onKeyPressHandler && props.onKeyPressHandler(e)\r\n            props.onEnter && props.onEnter()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input className={props.error !== \" \" ? s.inputNya : s.inputNya + \" \" + s.errorStyle}\r\n                   value={props.nNew}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   onChange={props.onChangeHandler}\r\n                   onBlur={props.offEditMode}\r\n                   autoFocus={true}/>\r\n\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default InputNew;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport B from \"./B.module.css\"\r\nimport ThirdHometask from \"../3Hometask/Third-Hometask\";\r\n\r\n\r\nexport type ButtonNewTypes = {\r\n    name:string,\r\n    typeofButton?:boolean,\r\n    setnNew?:(value:string)=>void,\r\n    NewElemInNewArr?:(name:string)=>void,\r\n    nNew:string,\r\n\r\n\r\n\r\n}\r\n\r\n\r\nfunction ButtonNew(props: ButtonNewTypes) {\r\n   function onClickHandler(){\r\n\r\n       if (props.nNew !== '') {\r\n            props.NewElemInNewArr && props.NewElemInNewArr(props.nNew);\r\n            props.setnNew && props.setnNew('');\r\n\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={props.typeofButton?B.box1 +\" \"+B.box11:B.box1}>\r\n            <div className={B.btn + ' ' + B.btnone} onClick={onClickHandler} >\r\n                <span>{props.name}</span>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default ButtonNew;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent, useState} from 'react';\nimport TH from \"./ThirdHometask.module.css\";\nimport {AppTypes} from \"../../App\";\nimport InputNew from \"../input/inputNew\";\nimport ButtonNew from \"../button/Button\";\n\n\n\n\ntype ThirdHometaskTypes = {\n    nNew: string,\n    newArr: Array<AppTypes>,\n    onChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void,\n    onKeyPressHandler: (e: KeyboardEvent<HTMLInputElement>) => void,\n    typeofButton:boolean,\n    setnNew:(value:string)=>void,\n    error?:string|null,\n    NewElemInNewArr:(name:string)=>void,\n\n\n}\n\n\nfunction ThirdHometask(props: ThirdHometaskTypes) {\n\n    return (\n        <div className={TH.inputContainer}>\n            <InputNew\n                autoFocus={true}\n                error={props.error}\n                setnNew={props.setnNew}\n                nNew={props.nNew}\n                onChangeHandler={props.onChangeHandler}\n                onKeyPressHandler={props.onKeyPressHandler}\n            />\n\n            <ButtonNew\n                        setnNew={props.setnNew}\n                        nNew={props.nNew}\n                        NewElemInNewArr={props.NewElemInNewArr}\n                        name={\"ADD\"}\n                        typeofButton={props.typeofButton}/>\n\n            <div className={TH.counter}><p>Обьектов в массиве:</p>\n                <span className={TH.span}>{props.newArr.length}</span>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default ThirdHometask;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport C from \"./C.module.css\"\r\n\r\ntype CheckBoxNewTypes = {\r\n\r\n}\r\n\r\nfunction CheckBoxNew(props: CheckBoxNewTypes) {\r\n    return <div className={C.chekboxtwo}>\r\n        <label className={C.checkbox}>\r\n            <input type=\"checkbox\" checked />\r\n            <span className={C.checkbox__icon}></span>\r\n\r\n        </label>\r\n    </div>\r\n}\r\n\r\n\r\nexport default CheckBoxNew;","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport ThirdHometask from \"../3Hometask/Third-Hometask\";\r\nimport InputNew from \"../input/inputNew\";\r\nimport ButtonNew from \"../button/Button\";\r\nimport CheckBoxNew from \"../checkBox/CheckBox\";\r\nimport {AppTypes} from \"../../App\";\r\nimport PJ from \"./PJ.module.css\";\r\nimport EditableSpan from \"../EditableSpan/EditableSpan\";\r\n\r\ntype PreJunior = {\r\n    nNew: string,\r\n    newArr: Array<AppTypes>,\r\n    onChangeHandler: (e: ChangeEvent<HTMLInputElement>) => void,\r\n    onKeyPressHandler: (e: KeyboardEvent<HTMLInputElement>) => void,\r\n    typeofButton:boolean,\r\n    setnNew:(value:string)=>void,\r\n    error?:string|null,\r\n    onEnter:()=>void,\r\n    NewElemInNewArr:(name:string)=>void,\r\n\r\n}\r\n\r\nfunction PreJunior(props:PreJunior){\r\n    return(\r\n        <div>\r\n            <ThirdHometask\r\n                nNew={props.nNew}\r\n                newArr={props.newArr}\r\n                onKeyPressHandler={props.onKeyPressHandler}\r\n                onChangeHandler={props.onChangeHandler}\r\n                typeofButton={false}\r\n                setnNew={props.setnNew}\r\n                error={props.error}\r\n                NewElemInNewArr={props.NewElemInNewArr}\r\n\r\n            />\r\n\r\n            <div className=\"wrapperForNew\">\r\n                <InputNew\r\n                    autoFocus={true}\r\n                    onKeyPressHandler={props.onKeyPressHandler}\r\n                    onEnter={props.onEnter}\r\n                    setnNew={props.setnNew}\r\n                />\r\n                <ButtonNew\r\n                    name={\"Моя кнопка\"}\r\n                    typeofButton={true}\r\n                    nNew={props.nNew}/>\r\n\r\n                <CheckBoxNew/>\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PreJunior;","import React, {ChangeEvent, useState} from 'react';\r\nimport InputNew from \"../input/inputNew\";\r\nimport ES from \"./ES.module.css\"\r\n\r\n\r\n\r\ntype EditableSpanType={\r\n\r\n}\r\n\r\nfunction EditableSpan (){\r\n\r\n\r\n\r\n\r\n    let [editMode,setEditMode]=useState(false);\r\n\r\n    let [title,settitle]=useState<string>(\"Кликни на мне 2 раза\")\r\n\r\n    const onEditMode = ()=>{\r\n        setEditMode(true);\r\n    }\r\n    const offEditMode = ()=>{\r\n        setEditMode(false);\r\n        settitle(title);\r\n    }\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>)=>{\r\n        settitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return editMode\r\n        ? <InputNew\r\n            autoFocus={true}\r\n            onBlur={offEditMode}\r\n            onKeyPressHandler={offEditMode}\r\n            onChangeHandler={changeTitle}\r\n            offEditMode={offEditMode}/>:\r\n        <span className={ES.editableSpan} onDoubleClick={onEditMode}>{title}</span>}\r\n\r\n\r\n\r\n\r\n\r\nexport default EditableSpan;","import React from 'react';\r\nimport EditableSpan from \"../EditableSpan/EditableSpan\";\r\nimport J from \"./Junior.module.css\";\r\n\r\nimport ButtonNew from \"../button/Button\";\r\n\r\ntype StateType = {\r\n    x: string\r\n    y: number\r\n}\r\ntype JuniorTypes={\r\n    nNew:string,\r\n}\r\n\r\nfunction Junior(props:JuniorTypes){\r\n\r\n    saveState<StateType>(\"test\", {x: \"A\", y: 1});\r\n\r\n    const state: StateType = restoreState<StateType>(\"test\", {x: \"\", y:0});\r\n\r\n    function saveState<T> (key: string, state: T) {\r\n        const stateAsString = JSON.stringify(state);\r\n        localStorage.setItem(key, stateAsString)\r\n    }\r\n\r\n    function restoreState<T>(key: string, defaultState: T) {\r\n        const stateAsString = localStorage.getItem(key);\r\n        if (stateAsString !== null) defaultState = JSON.parse(stateAsString) as T;\r\n        return defaultState;\r\n    }\r\n\r\n    return(\r\n        <div >\r\n            <EditableSpan />\r\n            <div className={J.buttonsBlock}>\r\n            <ButtonNew name={\"Сохранить\"}\r\n                       typeofButton={true}\r\n                       nNew={props.nNew}\r\n\r\n                       />\r\n            <ButtonNew name={\"Восстановить\"}\r\n                       typeofButton={false}\r\n                       nNew={props.nNew}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Junior;","import React from 'react';\r\n\r\n\r\nfunction JuniorPlus(){\r\n    return(\r\n        <div>\r\n            <span>JuniorPlus</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JuniorPlus;","import React from 'react';\r\nimport N from \"./N.module.css\";\r\nimport {NavLink, Route} from \"react-router-dom\";\r\nimport EditableSpan from \"../EditableSpan/EditableSpan\";\r\n\r\n\r\n\r\nfunction Navigation (){\r\n    return(\r\n        <div className={N.dropdown}>\r\n            <button className={N.dropbtn}>МЕНЮ</button>\r\n            <div className={N.dropdown_content}>\r\n                <div className={N.accordion}><NavLink  to=\"/PreJunior\">PreJunior</NavLink></div>\r\n                <div ><NavLink  to=\"/Junior\">Junior</NavLink></div>\r\n                <div ><NavLink  to=\"/Junior+\">Junior+</NavLink></div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport './App.css';\nimport ThirdHometask from \"./common/3Hometask/Third-Hometask\";\nimport {v1} from \"uuid\";\nimport InputNew from \"./common/input/inputNew\";\nimport CheckBoxNew from \"./common/checkBox/CheckBox\";\nimport ButtonNew from \"./common/button/Button\";\nimport {BrowserRouter, HashRouter, NavLink, Route, Switch} from \"react-router-dom\";\nimport PreJunior from \"./common/JuniorsFolder/PreJunior\";\nimport Junior from \"./common/JuniorsFolder/Junior\";\nimport JuniorPlus from \"./common/JuniorsFolder/Junior+\";\nimport N from \"./common/Navigation/N.module.css\";\nimport Navigation from \"./common/Navigation/Navigation\";\n\n\nexport type AppTypes = {\n    id: string,\n    name: string,\n}\n\n\nfunction App() {\n    let [error, setErr] = useState<string | null>(null);\n    let [nNew, setnNew] = useState<string>(\"\");\n    let [newArr, setnewArr] = useState<Array<{ id: string, name: string }>>([]);\n\n\n    function NewElemInNewArr(name: string) {\n        let newElement = {id: v1(), name: name};\n        setnewArr([newElement, ...newArr]);\n    }\n\n\n    function onChangeHandler(e: ChangeEvent<HTMLInputElement>) {\n        setnNew(e.currentTarget.value);\n        setErr(\"sdf\");\n    }\n\n    let onEnter = () => {\n        alert('Функция сработала на энтер!!');\n    }\n\n    function onKeyPressHandler() {\n        (nNew !== \"\" && NewElemInNewArr(nNew));\n        (nNew !== \"\" && alert('Privet' + ' ' + nNew));\n        setnNew('');\n    }\n\n    return (\n        <div className=\"App\">\n          <HashRouter>\n                <Navigation/>\n                <div>\n                    <Switch>\n                        <Route exact path='/PreJunior' render={() => <PreJunior\n                            onKeyPressHandler={onKeyPressHandler}\n                            onEnter={onEnter}\n                            onChangeHandler={onChangeHandler}\n                            error={error}\n                            nNew={nNew}\n                            setnNew={setnNew}\n                            typeofButton={false}\n                            newArr={newArr}\n                            NewElemInNewArr={NewElemInNewArr}\n\n\n                        />}/>\n                        <Route exact path='/Junior' render={() => <Junior\n                            nNew={nNew}\n                        />}/>\n                        <Route exact path='/Junior+' render={() => <JuniorPlus/>}/>\n                    </Switch>\n                </div>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}